//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable CS1573 // 参数在 XML 注释中没有匹配的 param 标记
#pragma warning disable CS1591 // 缺少对公共可见类型或成员的 XML 注释

using System.Runtime.InteropServices;

namespace MaaFramework.Binding.Interop.Native;

public static partial class MaaToolkit
{
    /// <summary>
    ///     Find a win32 window by class name and window name.
    /// </summary>
    /// <param name="className">The class name of the window. If passed an empty string, class name will not be filtered.</param>
    /// <param name="windowName">The window name of the window. If passed an empty string, window name will not be filtered.</param>
    /// <returns>The number of windows found that match the criteria. To get the corresponding window handle, use MaaToolkitGetWindow().</returns>
    /// <remarks>
    ///     This function finds the function by exact match. See also MaaToolkitSearchWindow().
    /// </remarks>
    [LibraryImport("MaaToolkit", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaSize MaaToolkitFindWindow(string className, string windowName);

    /// <summary>
    ///     Regex search a win32 window by class name and window name.
    /// </summary>
    /// <param name="className">The class name regex of the window. If passed an empty string, class name will not be filtered.</param>
    /// <param name="windowName">The window name regex of the window. If passed an empty string, window name will not be filtered.</param>
    /// <returns>The number of windows found that match the criteria. To get the corresponding window handle, use MaaToolkitGetWindow().</returns>
    /// <remarks>
    ///     This function searches the function by regex search. See also MaaToolkitFindWindow().
    /// </remarks>
    [LibraryImport("MaaToolkit", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaSize MaaToolkitSearchWindow(string className, string windowName);

    /// <summary>
    ///     List all windows.
    /// </summary>
    /// <returns>The number of windows found. To get the corresponding window handle, use</returns>
    [LibraryImport("MaaToolkit", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaSize MaaToolkitListWindows();

    /// <summary>
    ///     Get the window handle by index.
    /// </summary>
    /// <param name="index">The 0-based index of the window. The index should not exceed the number of windows found otherwise out_of_range exception will be thrown.</param>
    /// <returns>The window handle.</returns>
    [LibraryImport("MaaToolkit", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaWin32Hwnd MaaToolkitGetWindow(MaaSize index);

    /// <summary>
    ///     Get the window handle of the window under the cursor. This uses the WindowFromPoint() system API.
    /// </summary>
    /// <returns>The window handle.</returns>
    [LibraryImport("MaaToolkit", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaWin32Hwnd MaaToolkitGetCursorWindow();

    /// <summary>
    ///     Get the desktop window handle. This uses the GetDesktopWindow() system API.
    /// </summary>
    /// <returns>The window handle.</returns>
    [LibraryImport("MaaToolkit", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaWin32Hwnd MaaToolkitGetDesktopWindow();

    /// <summary>
    ///     Get the foreground window handle. This uses the GetForegroundWindow() system API.
    /// </summary>
    /// <returns>The window handle.</returns>
    [LibraryImport("MaaToolkit", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaWin32Hwnd MaaToolkitGetForegroundWindow();

    /// <summary>
    ///     Get the window class name by hwnd.
    /// </summary>
    /// <param name="hwnd">The window hwnd.</param>
    /// <param name="buffer">The output buffer.</param>
    /// <returns>MaaBool.</returns>
    [LibraryImport("MaaToolkit", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaToolkitGetWindowClassName(MaaWin32Hwnd hwnd, MaaStringBufferHandle buffer);

    /// <summary>
    ///     Get the window window name by hwnd.
    /// </summary>
    /// <param name="hwnd">The window hwnd.</param>
    /// <param name="buffer">The output buffer.</param>
    /// <returns>MaaBool.</returns>
    [LibraryImport("MaaToolkit", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaToolkitGetWindowWindowName(MaaWin32Hwnd hwnd, MaaStringBufferHandle buffer);
}
