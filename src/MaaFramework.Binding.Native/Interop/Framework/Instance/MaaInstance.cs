//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable CS1573 // 参数在 XML 注释中没有匹配的 param 标记
#pragma warning disable CS1591 // 缺少对公共可见类型或成员的 XML 注释

using System.Runtime.InteropServices;

namespace MaaFramework.Binding.Interop.Native;

public static partial class MaaInstance
{
    /// <summary>
    ///     Create an instance.
    /// </summary>
    /// <param name="callback">The callback function. See MaaAPICallback</param>
    /// <param name="callbackArg">The callback arg that will be passed to the callback function.</param>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaInstanceHandle MaaCreate(MaaInstanceCallback callback, MaaCallbackTransparentArg callbackArg);

    /// <summary>
    ///     Free the instance.
    /// </summary>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial void MaaDestroy(MaaInstanceHandle inst);

    /// <summary>
    ///     Set options for a given instance.
    /// </summary>
    /// <param name="inst">The handle of the instance to set options for.</param>
    /// <param name="key">The option key.</param>
    /// <param name="value">The option value.</param>
    /// <param name="valSize">The size of the option value.</param>
    /// <returns>Whether the option is set successfully.</returns>
    /// <remarks>
    ///     This function requires a given set of option keys and value types, otherwise this will fail. See MaaInstOptionEnum for details.
    /// </remarks>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaSetOption(MaaInstanceHandle inst, MaaInstOption key, byte[] value, MaaOptionValueSize valSize);

    /// <summary>
    ///     Bind the instance to an initialized resource.
    /// </summary>
    /// <remarks>
    ///     See functions in MaaResource.h about how to create a resource.
    /// </remarks>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaBindResource(MaaInstanceHandle inst, MaaResourceHandle res);

    /// <summary>
    ///     Bind the instance to an initialized controller.
    /// </summary>
    /// <remarks>
    ///     See functions in MaaController.h about how to create a controller.
    /// </remarks>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaBindController(MaaInstanceHandle inst, MaaControllerHandle ctrl);

    /// <summary>
    ///     Check if the instance is initialized.
    /// </summary>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaInited(MaaInstanceHandle inst);

    /// <summary>
    ///     Register a custom recognizer to the instance.
    /// </summary>
    /// <param name="name">The name of the recognizer that will be used to reference it.</param>
    /// <remarks>
    ///     See MaaCustomRecognizer.h for details about how to create a custom recognizer.
    /// </remarks>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaRegisterCustomRecognizer(MaaInstanceHandle inst, string name, MaaCustomRecognizerHandle recognizer, MaaTransparentArg recognizerArg);

    /// <summary>
    ///     Unregister a custom recognizer from the instance.
    /// </summary>
    /// <param name="name">The name of the recognizer when it was registered.</param>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaUnregisterCustomRecognizer(MaaInstanceHandle inst, string name);

    /// <summary>
    ///     Clear all custom recognizers registered to the instance.
    /// </summary>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaClearCustomRecognizer(MaaInstanceHandle inst);

    /// <summary>
    ///     Register a custom action to the instance.
    /// </summary>
    /// <param name="name">The name of the action that will be used to reference it.</param>
    /// <remarks>
    ///     See MaaCustomAction.h for details about how to create a custom action.
    /// </remarks>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaRegisterCustomAction(MaaInstanceHandle inst, string name, MaaCustomActionHandle action, MaaTransparentArg actionArg);

    /// <summary>
    ///     Unregister a custom action from the instance.
    /// </summary>
    /// <param name="name">The name of the action when it was registered.</param>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaUnregisterCustomAction(MaaInstanceHandle inst, string name);

    /// <summary>
    ///     Clear all custom actions registered to the instance.
    /// </summary>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaClearCustomAction(MaaInstanceHandle inst);

    /// <summary>
    ///     Post a task to the instance.
    /// </summary>
    /// <param name="entry">The entry of the task.</param>
    /// <param name="param">The parameter of the task.</param>
    /// <returns>The id of the task.</returns>
    /// <remarks>
    ///     The entry should be a task specified in the instance's resources. The param takes the same form as the pipeline json and will override the set parameters in the json file.
    /// </remarks>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaTaskId MaaPostTask(MaaInstanceHandle inst, string entry, string param);

    /// <summary>
    ///     Post a recognition to the instance.
    /// </summary>
    /// <param name="entry">The entry of the recognition.</param>
    /// <param name="param">The parameter of the recognition.</param>
    /// <returns>The id of the recognition.</returns>
    /// <remarks>
    ///     The entry should be a task specified in the instance's resources. The param takes the same form as the pipeline json and will override the set parameters in the json file.
    /// </remarks>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaTaskId MaaPostRecognition(MaaInstanceHandle inst, string entry, string param);

    /// <summary>
    ///     Post a action to the instance.
    /// </summary>
    /// <param name="entry">The entry of the action.</param>
    /// <param name="param">The parameter of the action.</param>
    /// <returns>The id of the action.</returns>
    /// <remarks>
    ///     The entry should be a task specified in the instance's resources. The param takes the same form as the pipeline json and will override the set parameters in the json file.
    /// </remarks>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaTaskId MaaPostAction(MaaInstanceHandle inst, string entry, string param);

    /// <summary>
    ///     Set the parameter of a task.
    /// </summary>
    /// <param name="id">The id of the task.</param>
    /// <param name="param">The parameter of the task.</param>
    /// <remarks>
    ///     See MaaPostTask() for details about the parameter.
    /// </remarks>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaSetTaskParam(MaaInstanceHandle inst, MaaTaskId id, string param);

    /// <summary>
    ///     Get the status of a task identified by the id.
    /// </summary>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaStatus MaaTaskStatus(MaaInstanceHandle inst, MaaTaskId id);

    /// <summary>
    ///     Wait for a task to finish.
    /// </summary>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaStatus MaaWaitTask(MaaInstanceHandle inst, MaaTaskId id);

    [Obsolete("Use !MaaRunning() instead.")]
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaTaskAllFinished(MaaInstanceHandle inst);

    /// <summary>
    ///     Is maa running?
    /// </summary>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaRunning(MaaInstanceHandle inst);

    /// <summary>
    ///     Post a stop signal to the instance.
    /// </summary>
    /// <remarks>
    ///     This immediately stops the instance and all its tasks.
    /// </remarks>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaPostStop(MaaInstanceHandle inst);

    [Obsolete("Use MaaPostStop() instead.")]
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaBool MaaStop(MaaInstanceHandle inst);

    /// <summary>
    ///     Get the resource handle of the instance.
    /// </summary>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaResourceHandle MaaGetResource(MaaInstanceHandle inst);

    /// <summary>
    ///     Get the controller handle of the instance.
    /// </summary>
    [LibraryImport("MaaFramework", StringMarshalling = StringMarshalling.Utf8)]
    public static partial MaaControllerHandle MaaGetController(MaaInstanceHandle inst);
}
