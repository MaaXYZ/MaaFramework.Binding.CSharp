//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable CS1573 // 参数在 XML 注释中没有匹配的 param 标记
#pragma warning disable CS1591 // 缺少对公共可见类型或成员的 XML 注释

using MaaFramework.Binding.Buffers;
using MaaFramework.Binding.Custom;
using System.Collections.Concurrent;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;

namespace MaaFramework.Binding.Interop.Native;

/// <summary>
///     Marshaller for <see cref="IMaaCustomController"/>.
/// </summary>
[CustomMarshaller(typeof(IMaaCustomController), MarshalMode.ManagedToUnmanagedIn, typeof(ManagedToUnmanagedIn))]
public static class MaaCustomControllerMarshaller
{
    private static readonly ConcurrentDictionary<IMaaCustomController, ManagedToUnmanagedIn> s_instances = [];

    /// <summary>
    ///     Releases a <see cref="IMaaCustomController"/>.
    /// </summary>
    /// <param name="managed">The <see cref="IMaaCustomController"/>.</param>
    public static void Free(IMaaCustomController managed)
    {
        if (s_instances.TryGetValue(managed, out var value))
        {
            ManagedToUnmanagedIn.Free(value);
        }
    }

    /// <summary>
    ///     Custom marshaller to marshal a managed <see cref="IMaaCustomController"/> as an unmanaged nint.
    /// </summary>
    public struct ManagedToUnmanagedIn
    {
        private IMaaCustomController _managed;
        private Delegates _delegates;
        private GCHandle _handle;

        /// <summary>
        ///     Initializes the marshaller with a managed <see cref="IMaaCustomController"/>.
        /// </summary>
        /// <param name="managed">The managed <see cref="IMaaCustomController"/> with which to initialize the marshaller.</param>
        public void FromManaged(IMaaCustomController managed)
        {
            _managed = managed;
            _delegates = new Delegates(managed);
        }

        /// <summary>
        ///     Converts the current managed <see cref="IMaaCustomController"/> to an unmanaged nint.
        /// </summary>
        /// <returns>An unmanaged nint.</returns>
        public MaaCustomControllerCallbacksHandle ToUnmanaged()
        {
            _handle = GCHandle.Alloc(new Unmanaged(_delegates), GCHandleType.Pinned);

            var value = s_instances.GetOrAdd(_managed, this);
            Interlocked.Increment(ref value._delegates.Times);
            if (value._handle != _handle)
                _handle.Free();

            return value._handle.AddrOfPinnedObject();
        }

        /// <summary>
        ///     Frees any allocated unmanaged memory.
        /// </summary>
        public void Free()
        {
            // Free
        }

        internal static void Free(ManagedToUnmanagedIn value)
        {
            if (Interlocked.Decrement(ref value._delegates.Times) == 0 && s_instances.TryRemove(value._managed, out _))
            {
                value._handle.Free();
            }
        }
    }

    private sealed class Delegates(IMaaCustomController managed)
    {
        public int Times = 0;
        public ConnectDelegate Connect = (nint transArg) => managed.Connect();
        public RequestUuidDelegate RequestUuid = (nint transArg, MaaStringBufferHandle buffer) => managed.RequestUuid(new MaaStringBuffer(buffer));
        public StartAppDelegate StartApp = (string intent, nint transArg) => managed.StartApp(intent);
        public StopAppDelegate StopApp = (string intent, nint transArg) => managed.StopApp(intent);
        public ScreencapDelegate Screencap = (nint transArg, MaaImageBufferHandle buffer) => managed.Screencap(new MaaImageBuffer(buffer));
        public ClickDelegate Click = (int x, int y, nint transArg) => managed.Click(x, y);
        public SwipeDelegate Swipe = (int x1, int y1, int x2, int y2, int duration, nint transArg) => managed.Swipe(x1, y1, x2, y2, duration);
        public TouchDownDelegate TouchDown = (int contact, int x, int y, int pressure, nint transArg) => managed.TouchDown(contact, x, y, pressure);
        public TouchMoveDelegate TouchMove = (int contact, int x, int y, int pressure, nint transArg) => managed.TouchMove(contact, x, y, pressure);
        public TouchUpDelegate TouchUp = (int contact, nint transArg) => managed.TouchUp(contact);
        public PressKeyDelegate PressKey = (int keycode, nint transArg) => managed.PressKey(keycode);
        public InputTextDelegate InputText = (string text, nint transArg) => managed.InputText(text);
    };

    /// <summary>
    ///     The custom controller API.
    /// </summary>
    /// <remarks>
    ///     <para>To create a custom controller, you need to implement this API.</para>
    ///     <para>You do not have to implement all the functions in this API. Instead, just implement the functions you need. Do note that if an unimplemented function is called, the framework will likely crash.</para>
    /// </remarks>
    [StructLayout(LayoutKind.Sequential)]
    private sealed class Unmanaged(Delegates delegates)
    {
        public nint Connect = Marshal.GetFunctionPointerForDelegate(delegates.Connect);
        public nint RequestUuid = Marshal.GetFunctionPointerForDelegate(delegates.RequestUuid);
        public nint StartApp = Marshal.GetFunctionPointerForDelegate(delegates.StartApp);
        public nint StopApp = Marshal.GetFunctionPointerForDelegate(delegates.StopApp);
        public nint Screencap = Marshal.GetFunctionPointerForDelegate(delegates.Screencap);
        public nint Click = Marshal.GetFunctionPointerForDelegate(delegates.Click);
        public nint Swipe = Marshal.GetFunctionPointerForDelegate(delegates.Swipe);
        public nint TouchDown = Marshal.GetFunctionPointerForDelegate(delegates.TouchDown);
        public nint TouchMove = Marshal.GetFunctionPointerForDelegate(delegates.TouchMove);
        public nint TouchUp = Marshal.GetFunctionPointerForDelegate(delegates.TouchUp);
        public nint PressKey = Marshal.GetFunctionPointerForDelegate(delegates.PressKey);
        public nint InputText = Marshal.GetFunctionPointerForDelegate(delegates.InputText);
    }

    [return: MarshalAs(UnmanagedType.U1)]
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool ConnectDelegate(nint transArg);

    /// <summary>
    ///     Write result to buffer.
    /// </summary>
    [return: MarshalAs(UnmanagedType.U1)]
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool RequestUuidDelegate(nint transArg, MaaStringBufferHandle buffer);

    [return: MarshalAs(UnmanagedType.U1)]
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool StartAppDelegate([MarshalAs(UnmanagedType.LPUTF8Str)] string intent, nint transArg);

    [return: MarshalAs(UnmanagedType.U1)]
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool StopAppDelegate([MarshalAs(UnmanagedType.LPUTF8Str)] string intent, nint transArg);

    /// <summary>
    ///     Write result to buffer.
    /// </summary>
    [return: MarshalAs(UnmanagedType.U1)]
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool ScreencapDelegate(nint transArg, MaaImageBufferHandle buffer);

    [return: MarshalAs(UnmanagedType.U1)]
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool ClickDelegate(int x, int y, nint transArg);

    [return: MarshalAs(UnmanagedType.U1)]
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool SwipeDelegate(int x1, int y1, int x2, int y2, int duration, nint transArg);

    [return: MarshalAs(UnmanagedType.U1)]
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool TouchDownDelegate(int contact, int x, int y, int pressure, nint transArg);

    [return: MarshalAs(UnmanagedType.U1)]
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool TouchMoveDelegate(int contact, int x, int y, int pressure, nint transArg);

    [return: MarshalAs(UnmanagedType.U1)]
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool TouchUpDelegate(int contact, nint transArg);

    [return: MarshalAs(UnmanagedType.U1)]
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool PressKeyDelegate(int keycode, nint transArg);

    [return: MarshalAs(UnmanagedType.U1)]
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool InputTextDelegate([MarshalAs(UnmanagedType.LPUTF8Str)] string text, nint transArg);
}
