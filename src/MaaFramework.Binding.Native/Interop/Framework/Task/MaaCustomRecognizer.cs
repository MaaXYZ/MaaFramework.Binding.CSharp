//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable CS1573 // 参数在 XML 注释中没有匹配的 param 标记
#pragma warning disable CS1591 // 缺少对公共可见类型或成员的 XML 注释

global using MaaRecognizerApiTuple = (
    System.Runtime.InteropServices.GCHandle Handle,
    MaaFramework.Binding.Custom.IMaaCustomRecognizer Managed,
    MaaFramework.Binding.Interop.Native.IMaaCustomRecognizerExtension.AnalyzeDelegate AnalyzeMethod
);

using MaaFramework.Binding.Buffers;
using MaaFramework.Binding.Custom;
using System.Runtime.InteropServices;

namespace MaaFramework.Binding.Interop.Native;

/// <summary>
///     The custom recognizer API.
/// </summary>
/// <remarks>
///     To create a custom recognizer, you need to implement this API.
///     You do not have to implement all the functions in this API. Instead, just implement the functions you need. Do note that if an unimplemented function is called, the framework will likely crash.
/// </remarks>
[StructLayout(LayoutKind.Sequential)]
public class MaaCustomRecognizerApi
{
    public nint AnalyzeFunctionPointer;
}

/// <summary>
///     A static class providing extension methods for the converter of <see cref="IMaaCustomRecognizer"/>.
/// </summary>
public static class IMaaCustomRecognizerExtension
{
    /// <remarks>
    ///     Write the recognition result to the out_box and return true if the recognition is successful. If the recognition fails, return false. You can also write details to the out_detail buffer.
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate MaaBool AnalyzeDelegate(MaaSyncContextHandle syncContext, MaaImageBufferHandle image, [MarshalAs(UnmanagedType.LPUTF8Str)] string taskName, [MarshalAs(UnmanagedType.LPUTF8Str)] string customRecognitionParam, MaaTransparentArg recognizerArg, MaaRectHandle outBox, MaaStringBufferHandle outDetail);
    public static MaaCustomRecognizerHandle Convert(this IMaaCustomRecognizer task, out MaaRecognizerApiTuple tuple)
    {
        MaaBool AnalyzeLocalMethod(MaaSyncContextHandle syncContext, MaaImageBufferHandle image, string taskName, string customRecognitionParam, MaaTransparentArg recognizerArg, MaaRectHandle outBox, MaaStringBufferHandle outDetail) => task.Analyze(new Binding.MaaSyncContext(syncContext), new MaaImageBuffer(image), taskName, customRecognitionParam, new Buffers.MaaRectBuffer(outBox), new Buffers.MaaStringBuffer(outDetail)).ToMaaBool();

        AnalyzeDelegate AnalyzeMethod = AnalyzeLocalMethod;

        var handle = GCHandle.Alloc(new MaaCustomRecognizerApi()
        {
            AnalyzeFunctionPointer = Marshal.GetFunctionPointerForDelegate<AnalyzeDelegate>(AnalyzeMethod),
        }, GCHandleType.Pinned);

        tuple = (
            handle,
            task,
            AnalyzeMethod
        );
        return handle.AddrOfPinnedObject();
    }
}
