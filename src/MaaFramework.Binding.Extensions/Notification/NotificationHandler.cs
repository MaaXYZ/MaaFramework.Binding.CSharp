using System.Text.Json;

namespace MaaFramework.Binding.Notification;

/// <summary>
///     Represents the method that will handle a notification when the notification provides detail.
/// </summary>
/// <typeparam name="TDetail">The type of the notification detail generated by the notification.</typeparam>
/// <param name="type">The type of the notification.</param>
/// <param name="detail">An object that contains the notification detail.</param>
public delegate void NotificationHandler<in TDetail>(NotificationType type, TDetail detail);

/// <summary>
///     A static class providing extension methods for <see cref="NotificationHandler{TDetail}"/>.
/// </summary>
public static class NotificationHandlerExtensions
{
    private static NotificationType ToNotificationType(this MaaCallbackEventArgs e) => e.Message switch
    {
        MaaMsg.Resource.Loading.Starting
            or MaaMsg.Controller.Action.Starting
            or MaaMsg.Node.Action.Starting
            or MaaMsg.Node.NextList.Starting
            or MaaMsg.Node.Recognition.Starting
            or MaaMsg.Tasker.Task.Starting
            => NotificationType.Starting,

        MaaMsg.Resource.Loading.Succeeded
            or MaaMsg.Controller.Action.Succeeded
            or MaaMsg.Node.Action.Succeeded
            or MaaMsg.Node.NextList.Succeeded
            or MaaMsg.Node.Recognition.Succeeded
            or MaaMsg.Tasker.Task.Succeeded
            => NotificationType.Succeeded,

        MaaMsg.Resource.Loading.Failed
            or MaaMsg.Controller.Action.Failed
            or MaaMsg.Node.Action.Failed
            or MaaMsg.Node.NextList.Failed
            or MaaMsg.Node.Recognition.Failed
            or MaaMsg.Tasker.Task.Failed
            => NotificationType.Failed,

        _ => NotificationType.Unknown,
    };

    /// <summary>
    ///     Converts a notificationHandler to a delegate used for <see cref="Abstractions.IMaaCommon.Callback"/>.
    /// </summary>
    /// <typeparam name="TDetail">The type of the notification detail generated by the notification.</typeparam>
    /// <param name="notify">The notificationHandler.</param>
    /// <param name="prefixOfMaaMsg">The prefix of <see cref="MaaMsg"/>.</param>
    /// <returns>A callback delegate.</returns>
    public static EventHandler<MaaCallbackEventArgs> ToCallback<TDetail>(this NotificationHandler<TDetail> notify, string prefixOfMaaMsg)
    {
        return OnCallback;

        void OnCallback(object? sender, MaaCallbackEventArgs e)
        {
            if (!e.Message.StartsWith(prefixOfMaaMsg, StringComparison.Ordinal)) return;

            switch (notify)
            {
                case NotificationHandler<string> notifyWithString:
                    notifyWithString.Invoke(e.ToNotificationType(), e.Details);
                    break;

                default:
                    var detail = JsonSerializer.Deserialize(e.Details, typeof(TDetail), NotificationDetailContext.Default) ?? throw new InvalidCastException();
                    notify.Invoke(e.ToNotificationType(), (TDetail)detail);
                    break;
            }
        }
    }

    /// <inheritdoc cref="ToCallback{TDetail}"/>
    public static EventHandler<MaaCallbackEventArgs> ToCallback(this NotificationHandler<ResourceLoadingDetail> notify)
        => notify.ToCallback(MaaMsg.Resource.Loading.Prefix);

    /// <inheritdoc cref="ToCallback{TDetail}"/>
    public static EventHandler<MaaCallbackEventArgs> ToCallback(this NotificationHandler<ControllerActionDetail> notify)
        => notify.ToCallback(MaaMsg.Controller.Action.Prefix);

    /// <inheritdoc cref="ToCallback{TDetail}"/>
    public static EventHandler<MaaCallbackEventArgs> ToCallback(this NotificationHandler<TaskerTaskDetail> notify)
        => notify.ToCallback(MaaMsg.Tasker.Task.Prefix);

    /// <inheritdoc cref="ToCallback{TDetail}"/>
    public static EventHandler<MaaCallbackEventArgs> ToCallback(this NotificationHandler<NodeNextListDetail> notify)
        => notify.ToCallback(MaaMsg.Node.NextList.Prefix);

    /// <inheritdoc cref="ToCallback{TDetail}"/>
    public static EventHandler<MaaCallbackEventArgs> ToCallback(this NotificationHandler<NodeRecognitionDetail> notify)
        => notify.ToCallback(MaaMsg.Node.Recognition.Prefix);

    /// <inheritdoc cref="ToCallback{TDetail}"/>
    public static EventHandler<MaaCallbackEventArgs> ToCallback(this NotificationHandler<TaskActionDetail> notify)
        => notify.ToCallback(MaaMsg.Node.Action.Prefix);
}

